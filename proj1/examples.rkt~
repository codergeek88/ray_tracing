#lang typed/racket

;; CMSC 15100 Winter 2022
;; Project 1
;; examples.rkt
;;
;; Eyeball tests for ray casting and recursive ray tracing
;;

;; load custom definitions
;;
(require "../include/cs151-core.rkt")

;; load image library definitions
;;
(require "../include/cs151-image.rkt")

;; load testing infrastructure
;;
(require typed/test-engine/racket-tests)

;; project modules
;;
(require "util.rkt")
(require "math-util.rkt")
(require "color.rkt")
(require "camera.rkt")
(require "material.rkt")
(require "hit.rkt")
(require "object.rkt")
(require "sphere.rkt")
(require "trace.rkt")

;; test cameras
(define cam-400x200x1 (Camera 400 200 1 1.0))
(define cam-400x200x20 (Camera 400 200 20 1.0))
(define cam-400x200x100 (Camera 400 200 100 1.0))
(define cam-200x100x100 (Camera 200 100 100 1.0))

(define sphere-0
  (make-sphere (Float3 0.0 0.0 -2.0) 0.5 (flat-material (RGB 1.0 0.0 0.0))))
(define sphere-1 (make-sphere (Float3 0.0 0.0 -2.0) 0.5 normal-material))
(define sphere-2 (make-sphere (Float3 0.0 -100.5 -2.0) 100.0 normal-material))

;; tests for Step 4

"== eyeball test for ray cast: flat material"
(time (foreach-pixel cam-400x200x1
                     (make-pixel-renderer
                      (pixel->rgb cam-400x200x1 (cast-ray-in-world sphere-0))
                      rgb->color)))

"== eyeball test for ray cast: normal material"
(time (foreach-pixel cam-400x200x1
                     (make-pixel-renderer
                      (pixel->rgb cam-400x200x1 (cast-ray-in-world sphere-1))
                      rgb->color)))

;; tests for Step 5

(define world-1 (list->object (list sphere-1 sphere-2)))

"== eyeball test for ray cast: normal material and two spheres"
(time (foreach-pixel cam-400x200x1
                     (make-pixel-renderer
                      (pixel->rgb cam-400x200x1 (cast-ray-in-world world-1))
                      rgb->color)))

;; tests for Step 6

"== eyeball test for ray cast (100 samples): normal material and two spheres"
(time (foreach-pixel cam-400x200x100
                     (make-pixel-renderer
                      (antialias-pixel->rgb cam-400x200x100 (cast-ray-in-world world-1))
                      rgb->color)))

;; tests for Step 7

(define sphere-3 (make-sphere (Float3 0.0 0.0 -2.0) 0.5
                              (lambertian-material (rgb-gray 0.5))))
(define sphere-4 (make-sphere (Float3 0.0 -100.5 -2.0) 100.0
                              (lambertian-material (rgb-gray 0.5))))
(define world-2 (list->object (list sphere-3 sphere-4)))


"== eyeball test for ray trace (100 samples): lambertian material and two spheres"
(foreach-pixel cam-200x100x100
               (make-pixel-renderer
                (antialias-pixel->rgb cam-200x100x100
                                      (trace-ray-in-world world-2 5))
                gamma-rgb->color))

;; define some more spheres
(define sphere-5 (make-sphere (Float3 0.0 0.0 -2.0) 0.5
                              (lambertian-material (RGB 0.8 0.3 0.3))))
(define sphere-6 (make-sphere (Float3 0.0 -100.5 -2.0) 100.0
                              (lambertian-material (RGB 0.8 0.8 0.0))))
(define sphere-7 (make-sphere (Float3 1.0 0.0 -2.0) 0.5
                              (metal-material (RGB 0.8 0.6 0.2) 1.0)))
(define sphere-8 (make-sphere (Float3 -1.0 0.0 -2.0) 0.5
                              (metal-material (RGB 0.8 0.8 0.8) 0.1)))

"== eyeball test for ray trace (100 samples): lambertian and metal; four spheres"
foreach-pixel cam-200x100x100
               (make-pixel-renderer
                (antialias-pixel->rgb cam-200x100x100
                                      (trace-ray-in-world world-3 20))
                gamma-rgb->color))

;; tests for the ray-tracer function

"== AA-100 ray-tracer Lambertian material"
(time (ray-tracer cam-400x200x100 world-2 5))

"== AA-100 ray-tracer Lambertian and metal"
(define world-3 (list->object (list sphere-5 sphere-6 sphere-7 sphere-8)))
(time (ray-tracer cam-400x200x100 world-3 20))
